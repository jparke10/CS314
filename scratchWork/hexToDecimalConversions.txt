4. Convert the following values from hex to decimal assuming
   they are stored as 32-bit 2's complement integers.

	a) 0x000000C4:
	
	First, convert to binary: 
	Each digit in hex ranges from 0 to 16, as such is 4 bits.
	4 in binary for the first digit breaks down as 0100 (0*2^0, 0*2^1, 1*2^2, 0*2^3)
	C (12 in decimal) in binary for the second digit breaks down as 1100 (0*2^0, 0*2^1, 1*2^2, 1*2^3)
	000000C4 in binary: 0000 0000 0000 0000 0000 0000 1100 0100
	We can determine the sign bit is positive, given that the 0 extends to the end of the number
	Thus we can conver like a normal binary number.
	Work backwards:
	0 *2^0 + 0 *2^1 + 1 *2^2 + 0 *2^3 + 0 *2^4 + 0 *2^5 + 1 *2^6 + 1 *2^7 + 0 *...
	0      + 0      + 4      + 0      + 0      + 0      + 64     + 128
	4 + 64 + 128 = 196, which is our final answer

	b) 0xFFFFFEC6:
	
	Convert to binary:
	6 in binary for the first digit works out as 0110 (0*2^0, 1*2^1, 1*2^2, 0*2^3)
	C (12 in decimal) in binary for the second digit breaks down as 1100 (0*2^0, 0*2^1, 1*2^2, 1*2^3)
	E (14 in decimal) in binary for the third digit breaks down as 1110 (0*2^0, 1*2^1, 1*2^2, 1*2^3)
	F (15 in decimal) in binary for 4th through 8th digit(s) breaks down as 1111 (1*2^0, 1*2^1, 1*2^2, 1*2^3)
	Assemble in order:
	FFFFFEC6 in binary: 1111 1111 1111 1111 1111 1110 1100 0110
	We can determine the sign bit is negative, given the 1 extends to the end of the number
	Thus we perform 2's complement operation: negate the bits, add 1, interpret as unsigned, and add - symbol
	Negate bits: 0000 0000 0000 0000 0000 0001 0011 1001
	Add 1: 0000 0000 0000 0000 0000 0001 0011 1010
	Interpret by working backwards:
	0 *2^0 + 1 *2^1 + 0 *2^2 + 1 *2^3 + 1 *2^4 + 1 *2^5 + 0 *2^6 + 0 *2^7 + 1 *2^8 + 0 *...
	0      + 2      + 0      + 8      + 16     + 32     + 0      + 0      + 256
	2 + 8 + 16 + 32 + 256 = 314
	Negative symbol: -314 is our final answer

	c) 0xFFFFFFFF:

	Convert to binary:
	F (15 in decimal) in binary for all 8 digits breaks down as 1111 (1*2^0, 1*2^1, 1*2^2, 1*2^3)
	Assemble in order:
	FFFFFFFF in binary: 1111 1111 1111 1111 1111 1111 1111 1111
	Sign bit is negative (1 extends to end of number)
	Perform 2's complement operation:
	Negate bits: 0000 0000 0000 0000 0000 0000 0000 0000
	Add 1: 0000 0000 .... 0001
	Work backwards:
	1 *2^0 + 0 *...
	Results in 1
	Negative symbol: -1 is our final answer

5. Convert the following hex values to decimal following IEEE754 standard for floating-point numbers:

	a) 0x80000000

	Convert to binary:
	0 digit in binary is 0000, of course
	8 in binary (8th digit) is 1000 (0 *2^0, 0 *2^1, 0 *2^2, 1 *2^3)
	Assemble in order:
	80000000 in binary: 1000 0000 0000 0000 0000 0000 0000 0000
	Split by IEEE754 standards: 1 bit for sign, 8 for exponent, 23 for mantissa
	1 00000000 00000000000000000000000
	Since exponent and mantissa are all 0's, we can obviously assume value of 0.0
	Apply sign bit: -1 * 0.0 = -0.0
	Solution is -0.0

	b) 0x3FE00000
	
	Convert to binary:
	0 digit in binary is 0000, of course
	E (14 in decimal) in binary for the 6th digit breaks down as 1110 (0*2^0, 1*2^1, 1*2^2, 1*2^3)
	F (15 in decimal) in binary for the 7th digit breaks down as 1111 (1*2^0, 1*2^1, 1*2^2, 1*2^3)
	3 in binary for the 8th digit breaks down as 0011 (1*2^0, 1*2^1, 0*2^2, 0*2^3)
	Assemble in order:
	3FE00000 in binary: 0011 1111 1110 0000 0000 0000 0000 0000
	Split by IEEE754 standards:
	0 01111111 11000000000000000000000
	Restore leading 1 to mantissa: 1.110(...)
	Subtract bias from exponent: bias for 8bit exponent = 2^(8-1)-1, or (2^7)-1, or 127
	exponent: 01111111 = 1 *2^0 + 1 *2^1 + 1 *2^2 + 1 *2^3 + 1 *2^4 + 1 *2^5 + 1 *2^6 + 0 *2^7
	= 1 + 2 + 4 + 8 + 16 + 32 + 64 = 127
	127 - 127 = 0, our shift. So, we don't shift at all
	Convert 1.110(...) to decimal:
	1 *2^0 + 1 *2^(-1) + 1 *2^(-2) + 0 *...
	= 1 + 1/2 + 1/4, or 1.75
	Apply sign bit: 1 * 1.75 = 1.75
	Done. Our solution is 1.75

	c) 0xC3140000

	Convert to binary:
	0 digit in binary is 0000, of course
	4 in binary for the 5th digit breaks down as 0100 (0*2^0, 0*2^1, 1*2^2, 0*2^3)
	1 in binary for the 6th digit breaks down as 0001 (1*2^0, 0*2^1, 0*2^2, 0*2^3)
	3 in binary for the 7th digit breaks down as 0011 (1*2^0, 1*2^1, 0*2^2, 0*2^3)
	C (12 in decimal) in binary for the 8th digit breaks down as 1100 (0*2^0, 0*2^1, 1*2^2, 1*2^3)
	Assemble in order:
	C3140000 in binary: 1100 0011 0001 0100 0000 0000 0000 0000
	Split by IEEE754 standards:
	1 10000110 00101000000000000000000
	Restore leading 1 to mantissa: 1.001010(...)
	Subtract bias from exponent:
	exp: 10000110 = 0 *2^0 + 1 *2^1 + 1 *2^2 + 0 *2^3 + 0 *2^4 + 0 *2^5 + 0 *2^6 + 1 *2^7
	2 + 4 + 128 = 134
	134 - 127 = 7, our denorm factor
	Denormalize mantissa: move decimal point to the right by 7
	1.0010100 *2^7 = 10010100.0
	Convert 1001010.0 to decimal:
	0 *2^(-1) + 0 *2^0 + 0 *2^1 + 1 *2^2 + 0 *2^3 + 1 *2^4 + 0 *2^5 + 0 *2^6 + 1 *2^7
	0 + 0 + 0 + 4 + 0 + 16 + 0 + 0 + 128 = 148
	Apply sign bit: -1 * 148 = -148
	Done. Our solution is -148

5. Convert the following decimal numbers to hex encoded by IEEE754 floating point standard

	a) 1.0
	
	Positive, so sign bit will be 0.
	Convert decimal to binary by breaking into powers of 2:
	1 = 1*2^0. 1.0 is our "denormalized" value, a mantissa with a leading 1
	Shift right so most significant 1 becomes leading digit: We shift 0 times for 1.0
	127 + 0 = 127, our exponent value in decimal
	Convert mantissa to binary: 1.0, which fills in as all 0's
	Convert exponent: 127 = 1 *2^0 + 1 *2^1 + 1 *2^2 + 1 *2^3 + 1 *2^4 + 1 *2^5 + 1 *2^6 + 0 *2^7
	Assemble in backwards order: 01111111
	Build IEEE754 binary value with 1 sign bit, 8 exponent bits, 23 mantissa bits:
	0 01111111 00000000000000000000000
	Split into groups of 4 bits for hex conversion:
	0011 1111 1000 0000 0000 0000 0000 0000
	0000 in hex is 0, obviously. 5 hex digits of 0
	1000 in hex is 8 (0*2^0 + 0*2^1 + 0*2^2 + 1*2^3)
	1111 in hex is F (1*2^0 + 1*2^1 + 1*2^2 + 1*2^3 = 15 in decimal)
	0011 in hex is 3 (1*2^0 + 1*2^1 + 0*2^2 + 0*2^3)
	Assemble in order:
	3F800000
	Final answer is 0x3F800000

	b) -16.5

	Negative, so sign bit will be 1.
	Convert decimal into binary using powers of 2:
	0.5 + 16 = 1*2^-1 + 0*2^0 + 0*2^1 + 0*2^2 + 0*2^3 + 1*2^4
	Build backwards: Our "denormalized" mantissa value is 10000.10...
	Shift: We shift right 4 digits to convert 10000.10... to 1.000010... (our "normalized" mantissa value)
	Calculate exponent with bias: 127 + 4 = 131 in decimal
	Normalized mantissa 1.000010... shows how we fill in mantissa bits (000010...)
	Convert decimal exponent to binary: 131 = 1 *2^0 + 1 *2^1 + 0 *2^2 + ... + 1 *2^7
	Assemble in backwards order: 10000011
	Build IEEE754 binary value: 1 10000011 00001000000000000000000
	Split for hex conversion:
	1100 0001 1000 0100 0000 0000 0000 0000
	4 hex digits of 0
	0100 in hex is 4 (0*2^0 + 0*2^1 + 1*2^2 + 0*2^3)
	1000 in hex is 8 (0*2^0 + 0*2^1 + 0*2^2 + 1*2^3)
	0001 in hex is 1 (1*2^0 + 0*2^1 + 0*2^2 + 0*2^3)
	1100 in hex is C (0*2^0 + 0*2^1 + 1*2^2 + 1*2^3, 12 in decimal)
	Assemble in order:
	C1840000
	Final answer is 0xC1840000

	c) 314.25

	Positive, so sign bit will be 0
	Convert decimal into binary using powers of 2:
	0.25 + 2 + 8 + 16 + 32 + 256 = 1*2^-2 + 0*2^-1 + 0*2^0 + 1*2^1 + 0*2^2 + 1*2^3 + 1*2^4 + 1*2^5 + 0*2^6
	+ 0*2^7 + 1*2^8
	Build backwards: 100111010.01, our denormalized mantissa value
	Shift: Shift right 8 to get our normalized mantissa value of 1.0011101001
	Calculate exponent with bias: 8 + 127 = 135 in decimal
	Normalized mantissa gives us the mantissa bits (00111010010...)
	Convert decimal exponent to binary: 135 = 1*2^0 + 1*2^1 + 1*2^2 + 0*2^3 + ... + 1*2^7
	Assemble in backwards order: 10000111
	Build float binary value: 0 10000111 00111010010000000000000
	Split for hex conversion: 0100 0011 1001 1101 0010 0000 0000 0000
	3 hex digits of 0
	0010 in hex is 2 (0*2^0 + 1*2^1 + 0*2^2 + 0*2^3)
	1101 in hex is D (1*2^0 + 0*2^1 + 1*2^2 + 1*2^3, 13 in decimal)
	1001 in hex is 9 (1*2^0 + 0*2^1 + 0*2^2 + 1*2^3)
	0011 in hex is 3 (1*2^0 + 1*2^1 + 0*2^2 + 0*2^3)
	0100 in hex is 4 (0*2^0 + 0*2^1 + 1*2^2 + 0*2^3)
	Assemble in order:
	439D2000
	Final answer is 0x439D2000
