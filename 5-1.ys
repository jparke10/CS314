# y86 file by Jack Parker
# hardcoded array and swap routine inspired from Brad Bailey's lab
# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 
# Array of 10 elements
	.align 8
array:	
    .quad 0x000000000010
    .quad 0x000000000009
    .quad 0x000000000008
    .quad 0x000000000007
    .quad 0x000000000006
    .quad 0x000000000005
    .quad 0x000000000004
    .quad 0x000000000003
    .quad 0x000000000002
    .quad 0x000000000001

main:
	irmovq array,%rdi # hardcoded array in reg
	irmovq $10,  %rsi # constant for array len
	# irmovq array,%rsi
	# iaddq $8,%rsi # &a[1]
	# call swap
	call sort
	ret

# goto implementation of sort method

# void sort(long *arr, long length) {
# 	long sorted = 0;
# 	outerLoop:
# 		sorted = 1;
# 		long i = 0;
# 		innerLoop:
# 			if (arr[i] > arr[i + 1]) {
# 				swap(&arr[i], &arr[i + 1]);
# 				sorted = 0;
# 			}
# 			i++;
# 			if (i < length - 1) goto innerLoop;
# 		if (!sorted) goto outerLoop;
# }

sort:
    # long sorted = 0
    irmovq $0,%r8
    # &arr[0] is in rdi, length is in rsi
    # want &arr[1] in rsi, need to move length
    rrmovq %rsi,%r9 # use r9 b.c. r8 is reserved for sorted bool
    rrmovq %rdi,%rsi
    iaddq $8,%rsi
    # now &arr[0] is in rdi and &arr[1] is in rsi 
    # also back these up in registers for multiple
    # inner loop iterations
    rrmovq %rdi,%r13
    rrmovq %rsi,%r14
    OUTERLOOP:
        # sorted = 1
        irmovq $1,%r8
        # move length param to new reg for counter use
        # since inner loop will likely run multiple times
        rrmovq %r9,%r10
	# also move array pointers back to &a[0] and &a[1]
	# thus resetting the inner loop
        rrmovq %r13,%rdi
        rrmovq %r14,%rsi
        # length - 1
        isubq $1,%r10
        INNERLOOP:
            # decrement counter
            isubq $1,%r10
            # this could probably use less registers if I did it with swap
            mrmovq (%rdi),%r11
            mrmovq (%rsi),%r12
            # subtract arr[i] from arr[i + 1], if negative then conditional is met
            # if positive/0, skip swap call by jumping to NEXT
            subq %r11,%r12
            jge NEXT
            # call swap on %rdi and %rsi
            call swap
            # sorted = 0
            irmovq $0,%r8
        NEXT:
        # increment pointers for next pass
        iaddq $8,%rdi
        iaddq $8,%rsi
        # set condition code
        andq %r10,%r10
        # restart inner loop if greater than 0
        jg INNERLOOP
        # condition code for while loop
        andq %r8,%r8
        # while (!sorted) or while sorted = 0
        je OUTERLOOP
    ret

swap:
	# we load the values from memory, setting rdx and rcx by "dereferencing" the "pointers"
	mrmovq (%rdi),%rdx # long x = *xp;
	mrmovq (%rsi),%rcx # long y = *yp;
	# place the values back in memory in opposite order, completing the swap
	rmmovq %rcx,(%rdi) # *xp = y;
	rmmovq %rdx,(%rsi) # *yp = x;
	ret # return (end function/label)
	
# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
